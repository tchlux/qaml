# Given three signed integers (a,b,c) with equal number of bits, perform:
#    c = min(a, b)
def min_int(*bit_indices):
    if ((len(bit_indices) % 3) != 0):
        raise(UsageError("'min_int' takes three signed integers with equal number of bits."))
    int_size = len(bit_indices) // 3
    # Split up the bits into the three integers.
    a_bits = bit_indices[:int_size]
    b_bits = bit_indices[int_size:-int_size]
    out_bits = bit_indices[-int_size:]
    # Perform the minimization operation.
    # (a + b) / 2 - |a - b|



    # Constraints based on entries in selection.
    # a2 == 0
    # a1 == 0
    # b12 + b13 + b23 + a3 == 0

    # Additional constant constraints over above values based on unselected.
    # a3 > 0

    # Additional pairwise constraints
    # b12 > 0
    # b13 + a3 > 0
    # b23 + a3 > 0

    # Correct coefficients:
    # a1 = 0
    # a2 = 0
    # a3 = 3
    # b12 = 1
    # b13 = -1.5
    # b23 = -1.5

